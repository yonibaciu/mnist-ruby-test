<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Digit classifier</title>
  <style>
    body {
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      font-size: 14px;
      line-height: 1.5;
      color: #333;
      background-color: #fff;
      max-width: 1000px;
      margin: 0px auto;
    }
    canvas {
      cursor: pointer;
    }
    #leftcol {
      float: left;
      width: 280px;
      margin-right: 40px;
    }
    #rightcol {
      float: left;
      margin-right: 20px;
    }
    button {
      line-height: 1.5;
      border-radius: 4px;
      font-size: 14px;
      font-weight: 400;
      padding: 6px 12px;
      border: 1px solid #adadad; 
      background-color: #fff;
      outline: 0;
    }

    button#submit {
      background-color: #337ab7;
      color: #fff;
    }
    #subhead {
      font-size: 16px;
    }

    #results {
      border: 1px solid gray;
      border-collapse: collapse;
    }
    #results td {
      border: 1px solid gray;
      padding: 5px;
    }
    #results td.good-node {
      background-color: green;
      color: white;
    }
    #results td.maybe-node {
      background-color: orange;
      color: white;
    }
    </style>
</head>
<body>
  <h1>Digit Classifier</h1>
  <p id="subhead">Draw a digit [0-9] in the box below:</p>

  <div id="leftcol">
    <canvas id="canvas" width="280" height="280" style="border: 1px solid #CCC"></canvas>

    <div>
      <button id="submit">Predict</button> 
      <button id="clear">Clear</button>
    </div>
  
    <p>Based on a Sinatra app written by <a href="https://github.com/gbuesing">Geoff Buesing</a>.</p>

  </div>

  <div id="rightcol">
    <table id="results">
      <thead>
        <tr>
          <td></td>
          <td></td>
          <td colspan="10">Output layer</tr>
        </tr>
        <tr>
          <td>Actual</td>
          <td>Predicted</td>
          <td>0</td>
          <td>1</td>
          <td>2</td>
          <td>3</td>
          <td>4</td>
          <td>5</td>
          <td>6</td>
          <td>7</td>
          <td>8</td>
          <td>9</td>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
  </div>

  <a href="https://github.com/gbuesing/mnist-ruby-test"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>

  <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
  <script>
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext("2d");
    
    ctx.strokeStyle = "#000";
    ctx.lineWidth = 20;
    ctx.lineJoin = "round";
    ctx.lineCap = "round";
    
    // https://software.intel.com/en-us/html5/articles/touch-drawing-app-using-html5-canvas
    $.fn.drawTouch = function() {
      var start = function(e) {
          e.preventDefault();
          var touchEvent = e.originalEvent.changedTouches[0];
          ctx.beginPath();
          ctx.moveTo(touchEvent.pageX - this.offsetLeft, touchEvent.pageY - this.offsetTop);
      };
      var move = function(e) {
        e.preventDefault();
        var touchEvent = e.originalEvent.changedTouches[0];
        ctx.lineTo(touchEvent.pageX - this.offsetLeft, touchEvent.pageY - this.offsetTop);
        ctx.stroke();
      };
      $(this).on('touchstart', start);
      $(this).on('touchmove', move);
    };

    $.fn.drawMouse = function() {
      var clicked = 0;
      var start = function(e) {
          clicked = 1;
          ctx.beginPath();
          ctx.moveTo(e.pageX - this.offsetLeft, e.pageY - this.offsetTop);
      };
      var move = function(e) {
          if(clicked){
              ctx.lineTo(e.pageX - this.offsetLeft, e.pageY - this.offsetTop);
              ctx.stroke();
          }
      };
      var stop = function(e) {
          clicked = 0;
      };
      $(this).mousedown(start);
      $(this).mousemove(move);
      $(this).mouseup(stop);
    };

    $('#canvas').drawTouch();
    $('#canvas').drawMouse();

    $('#submit').click(function(e) {
      e.preventDefault();
      $('#subhead').text('Predicting...');
      var $this = $(this);
      var dataURL = canvas.toDataURL();
      $this.attr('disabled', 'disabled');

      $.post('/predict', {dataURL: dataURL}, function(resp) {
        $this.removeAttr('disabled');
        // alert('Predicted: ' + resp.predict);

        $('#subhead').text('Predicted: ' + resp.predict);

        var img = $('<img>').attr('src', resp.data_url);
        var tr = $('<tr>')
        $('<td>').html(img).appendTo(tr);
        $('<td>').html(resp.predict).appendTo(tr);
        for (var i = 0; i < 10; i += 1) {
          var td = $('<td>').html(resp.output_later[i].toFixed(2));
          if (resp.output_later[i] > 0.8) {
            td.addClass('good-node');
          }
          else if (resp.output_later[i] > 0.4) {
            td.addClass('maybe-node');
          }
          td.appendTo(tr);
        }
        tr.prependTo('#results > tbody').hide().fadeIn();
      }, 'json');
    });

    $('#clear').click(function(e) {
      e.preventDefault();
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      $('#subhead').text('Draw a digit [0-9] in the box below:');
    })

  </script>
</body>
</html>